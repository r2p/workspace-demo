#include "cc3000_common.h"
#include "hci.h"
#include "wlan.h"

#define READ					0x03
#define WRITE					0x01

#define HI(value)				(((value) & 0xFF00) >> 8)
#define LO(value)				((value) & 0x00FF)

#define ASSERT_CS()				CC3000_CS_LOW()
#define DEASSERT_CS()			        CC3000_CS_HIGH()


#define HEADERS_SIZE_EVNT       (SPI_HEADER_SIZE + 5)
#define MAX_PACKET_PAYLOAD_SIZE 1014
#define RX_SPI_BUFFER_SIZE      (MAX_PACKET_PAYLOAD_SIZE+HEADERS_SIZE_EVNT)
#define TX_SPI_BUFFER_SIZE      (MAX_PACKET_PAYLOAD_SIZE+HEADERS_SIZE_EVNT)

typedef void (*gcSpiHandleRx)(void *p);
typedef void (*gcSpiHandleTx)(void);

extern unsigned char wlan_rx_buffer[RX_SPI_BUFFER_SIZE];
extern unsigned char wlan_tx_buffer[TX_SPI_BUFFER_SIZE];

/* CC3000 SPI Protocol API */
extern void SpiOpen(gcSpiHandleRx pfRxHandler);
extern void SpiClose(void);
extern long SpiWrite(unsigned char *pUserBuffer, unsigned short usLength);
extern void SpiResumeSpi(void);
extern void SPI_DMA_IntHandler(void);
extern void SPI_EXTI_IntHandler(void);

extern void handle_spi_request();























#include <stdbool.h>

#include "ch.h"
#include "hal.h"

#include "hci.h"
#include "evnt_handler.h"

#include "cc3000.h"

#if !HAL_USE_SPI
#error "SPI driver must be activated"
#endif

#if !defined(CC3000_SPI_DRIVER)
#error "CC3000 driver activated but no SPI peripheral assigned"
#endif

#define CC3000_SPI_WRITE         1
#define CC3000_SPI_READ          3

unsigned char wlan_tx_buffer[CC3000_TX_BUFFER_SIZE];
unsigned char wlan_rx_buffer[CC3000_RX_BUFFER_SIZE];

extern CC3000Driver CC3000D1;

typedef void (*spirx_cb)(void *p);





long SpiWrite(unsigned char *buf, unsigned short len) {
	static bool first_write = true;

    while (CC3000D1.state != CC3000_READY) {
    	chThdSleepMilliseconds(1);
    }

	// padding
	if (!(len & 0x01)) {
    	len++;
    }

	buf[0] = CC3000_SPI_WRITE;
	buf[1] = len >> 8; // HI
	buf[2] = len; // LOW
	buf[3] = 0;
	buf[4] = 0;

	len += sizeof(SPI_HEADER_SIZE);

	if (first_write) {
		first_write = false;
		spiSelect(&CC3000_SPI_DRIVER);
		halPolledDelay(US2ST(50));
	    spiStartSend(&CC3000_SPI_DRIVER, 4, buf);
	    halPolledDelay(US2ST(50));
		CC3000D1.state = CC3000_WRITING;
	    spiStartSend(&CC3000_SPI_DRIVER, len - 4, buf + 4);
	} else {
		chSysLock();
		CC3000D1.state = CC3000_WRITING;
		spiSelectI(&CC3000_SPI_DRIVER);
		// Wait for IRQ
		CC3000D1.tp = chThdSelf();
		chSchGoSleepS(THD_STATE_SUSPENDED);

		spiStartSendI(&CC3000_SPI_DRIVER, len, buf);

		chSysUnlock();

	    while (CC3000D1.state == CC3000_WRITING) {
	    	chThdSleepMilliseconds(1);
	    }
	}
}


void SpiClose(void) {

	spiStop(&CC3000_SPI_DRIVER);
	extChannelDisnable(&CC3000_EXTI_DRIVER, CC3000_IRQ_PAD);
	extStop(&CC3000_EXTI_DRIVER);
}


void  SpiResumeSpi(void) {

}
